{"version":3,"file":"cms.3761c9cf247d371881f5.hot-update.js","sources":["webpack:///./src/templates/about-page.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport ReactMarkdown from \"react-markdown\";\nimport Helmet from \"react-helmet\";\n\nimport Layout from \"../components/Layout\";\nimport HTMLContent from \"../components/Content\";\nimport \"../styles/about-page.scss\";\n\nexport const AboutPageTemplate = (props) => {\n  const { page } = props;\n\n  return (\n    <article className=\"about\">\n      <div className=\"about-container  container\">\n        <section className=\"about-header\">\n          <div className=\"about-titleWrapper\">\n            <h1 className=\"about-title\">{page.frontmatter.title}</h1>\n          </div>\n          <div className=\"about-imageWrapper\">\n            <img src={page.frontmatter.mainImage.image} alt={page.frontmatter.mainImage.imageAlt} />\n          </div>\n        </section>\n        <section className=\"section\">\n          {/* The page.html is actually markdown when viewing the page from the netlify CMS,\n              so we must use the ReactMarkdown component to parse the markdown in that case  */}\n          {page.bodyIsMarkdown ? (\n            <ReactMarkdown className=\"about-description\" source={page.html} />\n          ) : (\n            <HTMLContent className=\"about-description\" content={page.html} />\n          )}\n          <ul className=\"about-gallery  galleryList\">\n            {page.frontmatter.gallery.map((galleryImage, index) => (\n              <li key={index} className=\"galleryList-item\">\n                <img src={galleryImage.image} alt={galleryImage.imageAlt} />\n              </li>\n            ))}\n          </ul>\n        </section>\n      </div>\n      <section className=\"section  developerGroups  about-developerGroups\">\n        <div className=\"container\">\n          <ReactMarkdown source={page.frontmatter.developerGroups} />\n        </div>\n      </section>\n      <section className=\"section  organizers  about-organizers\">\n        <div className=\"container  organizers-container\">\n          <h2 className=\"organizers-title\">{page.frontmatter.organizers.title}</h2>\n          <ul className=\"organizers-list\">\n            {page.frontmatter.organizers.gallery.map((galleryImage, index) => (\n              <li key={index} className=\"organizers-listItem\">\n                <img className=\"organizers-listItemImage\" src={galleryImage.image} alt={galleryImage.imageAlt} />\n                <span className=\"organizers-listItemName\">{galleryImage.name}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </section>\n    </article>\n  );\n};\n\nconst AboutPage = () => {\n  const data = useStaticQuery(graphql`\n    query AboutPage($id: String!) {\n      markdownRemark(id: { eq: $id }) {\n        html\n        frontmatter {\n          title\n          mainImage {\n            image\n            imageAlt\n          }\n          gallery {\n            image\n            imageAlt\n          }\n          developerGroups\n          organizers {\n            title\n            gallery {\n              image\n              imageAlt\n              name\n            }\n          }\n          seo {\n            browserTitle\n            title\n            description\n          }\n        }\n      }\n      ...LayoutFragment\n    }\n  `);\n  const { markdownRemark: page, footerData, navbarData } = data;\n  const {\n    frontmatter: {\n      seo: { title: seoTitle, description: seoDescription, browserTitle },\n    },\n  } = page;\n\n  return (\n    <Layout footerData={footerData} navbarData={navbarData}>\n      <Helmet>\n        <meta name=\"title\" content={seoTitle} />\n        <meta name=\"description\" content={seoDescription} />\n        <title>{browserTitle}</title>\n      </Helmet>\n      <AboutPageTemplate page={{ ...page, bodyIsMarkdown: false }} />\n    </Layout>\n  );\n};\n\nAboutPage.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n\nexport default AboutPage;\n\n/*\nexport const aboutPageQuery = graphql`\n  query AboutPage($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        title\n        mainImage {\n          image\n          imageAlt\n        }\n        gallery {\n          image\n          imageAlt\n        }\n        developerGroups\n        organizers {\n          title\n          gallery {\n            image\n            imageAlt\n            name\n          }\n        }\n        seo {\n          browserTitle\n          title\n          description\n        }\n      }\n    }\n    ...LayoutFragment\n  }\n`;\n*/\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAWA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyCA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AApDA;AACA;;;AAoDA;AACA;AADA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAnJA;AAqDA;;;;;;;;;;;;;;A","sourceRoot":""}